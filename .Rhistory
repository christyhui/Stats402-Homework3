liver_cvglm$results
m1 = glm(tx_fail ~ hgt_cm_don_calc.x*ethnicity_don, data = liver, family="binomial")
plot(allEffects(m1))
liver_glm2 = glm(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x + hgt_cm_don_calc.x*ethnicity_don,
data = liver,
family = "binomial")
summary(liver_glm2)
predict(liver_glm)
train_df$Versicolor
liver$tx_fail
train_df$Versicolor
predictions
predict(liver_glm, newdata = liver)
predict(liver_cvglm, newdata = liver)
confusionMatrix(predict(liver_cvglm, newdata = liver), liver$tx_fail)
confusionMatrix(predict(liver_cvglm, newdata = liver), liver$tx_fail)
confusionMatrix(predict(liver_cvglm), liver$tx_fail)
table(liver$tx_fail, Success = predict(liver_glm, liver) > 0.5)
table(liver$tx_fail, c("Success", "Failure") = predict(liver_glm, liver) > 0.5)
table(liver$tx_fail, predict(liver_glm, liver) > 0.5)
confusionMatrix(liver$tx_fail, predict(liver_glm, liver) > 0.5)
predictions = ifelse(predict(liver_glm, liver) > 0.5 == TRUE, "Failure", "Success")
predictions = ifelse(predict(liver_glm) > 0.5, "Failure", "Success")
confusionMatrix(liver$tx_fail, predictions)
predictions = ifelse(predict(liver_glm) > 0.5, "Failure", "Success")
predictions
factor(predictions, levels = "Success", "Failure")
predictions
factor(predictions)
factor(predictions, levels = c("Success", "Failure"))
predictions = ifelse(predict(liver_glm) > 0.5, "Failure", "Success")
predictions = factor(predictions, levels = c("Success", "Failure"))
confusionMatrix(liver$tx_fail, predictions)
anova(liver_glm, liver_glm2, test = "chisq")
anova(liver_glm, liver_glm2, test = "Chisq")
install.packages(ROCR)
install.packages("ROCR")
table(iris$Versicolor)
table(liver$tx_fail)
library(ROCR)
probpredictions <- predict(liver_glm)
probpredictions <- probpredictions[,"Failure"]
library(ROCR)
probpredictions <- predict(liver_glm)
probpredictions <- probpredictions["Failure"]
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
probpredictions <- predict(liver_glm)
probpredictions
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
# read in libraries
library(ggplot2)
library(sjPlot)
library(caret)
# read in data and make every variable we work with the correct data type
liver = read.csv("liver23.csv")
liver$tx_fail = ifelse(liver$tx_fail == 0, "Success", "Failure")
liver$tx_fail = factor(liver$tx_fail, levels = c("Success", "Failure"))
liver$hgt_cm_don_calc.x = as.numeric(liver$hgt_cm_don_calc.x)
liver$bmi_don_calc.x = as.numeric(liver$bmi_don_calc.x)
liver$coronary_angio_don.x = as.factor(liver$coronary_angio_don.x)
liver$hist_hypertens_don.x = as.factor(liver$hist_hypertens_don.x)
liver$ethnicity_don = as.factor(liver$ethnicity_don)
# create table of binary variable
table(liver$tx_fail)
# show proportion as well
prop.table(table(liver$tx_fail))
# create table of values for categorical variables
table(liver$coronary_angio_don.x)
# show proportion as well
prop.table(table(liver$coronary_angio_don.x))
# create table of values for categorical variables
table(liver$hist_hypertens_don.x)
# show proportion as well
prop.table(table(liver$hist_hypertens_don.x))
# create histogram of height values
hist(liver$hgt_cm_don_calc.x, xlab = "Height of Donor", main = "Distribution of Donor Height", freq = FALSE)
lines(density(liver$hgt_cm_don_calc.x), lwd = 2)
# create histogram of BMI values
hist(liver$bmi_don_calc.x, xlab = "BMI of Donor", main = "Distribution of Donor BMI", freq = FALSE, ylim = c(0, 0.10))
lines(density(liver$bmi_don_calc.x), lwd = 2)
liver_glm = glm(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x, data = liver, family = "binomial")
summary(liver_glm)
cbind(Estimate = exp(coef(liver_glm)))
suppressWarnings(exp(confint(liver_glm))) # had to run suppress warning because there were too many numbers close to 0, which gave the warning
plot_model(liver_glm, p.val = "wald")
# calculate pseudo r-squared by following the formula: 1-(residual deviance/null deviance)
1-(liver_glm$deviance/liver_glm$null.deviance)
predictions = ifelse(predict(liver_glm) > 0.5, "Failure", "Success")
predictions = factor(predictions, levels = c("Success", "Failure"))
confusionMatrix(liver$tx_fail, predictions)
set.seed(213)
train_control = trainControl(method = "cv", number = 5, classProbs = TRUE)
liver_cvglm = train(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x,
data = liver,
method = "glm",
family = binomial,
trControl = train_control)
liver_cvglm$results
confusionMatrix(predict(liver_cvglm), liver$tx_fail)
m1 = glm(tx_fail ~ hgt_cm_don_calc.x*ethnicity_don, data = liver, family="binomial")
plot(allEffects(m1))
liver_glm2 = glm(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x + hgt_cm_don_calc.x*ethnicity_don,
data = liver,
family = "binomial")
summary(liver_glm2)
anova(liver_glm, liver_glm2, test = "Chisq")
library(ROCR)
probpredictions <- predict(liver_glm)
probpredictions <- probpredictions["Failure"]
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
pred_liver_glm <- prediction(predictions, liver$tx_fail)
predictiosn
predictions
predict(liver_glm)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=FALSE, col="blue")
abline(0, 1)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "acc")
plot(roc_curve, colorize=FALSE, col="blue")
abline(0, 1)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "acc")
plot(roc_curve, colorize=FALSE, col="blue")
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "acc")
plot(roc_curve)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=FALSE, col="blue")
abline(0, 1)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=TRUE, col="blue")
abline(0, 1)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=TRUE, col="blue")
abline(0, 1)
roc_curve <- performance(pred_liver_glm, "acc")
plot(roc_curve, colorize=TRUE, col="blue")
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=TRUE, col="blue")
abline(0, 1)
roc_curve <- performance(pred_liver_glm, "acc")
plot(roc_curve)
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=TRUE, col="blue")
abline(0, 1)
knitr::opts_chunk$set(echo = TRUE)
diabetic = read.csv("diabetic.csv")
diabetic$TotalRiskFactors
unique(diabetic$TotalRiskFactors)
recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
library(dplyr)
recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
diabetic$TotalRiskFactors
class(diabetic$TotalRiskFactors)
unique(diabetic$TotalRiskFactors)
recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One'
")
recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
")
library(car)
library(car)
recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
unique(diabetic$TotalRiskFactors)
diabetic$TotalRiskFactors = recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
unique(diabetic$TotalRiskFactors)
is.na(diabetic$TotalRiskFactors)
sum(is.na(diabetic$TotalRiskFactors))
diabetic = read.csv("diabetic.csv")
diabetic$TotalRiskFactors = recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
diabetic$Diabetes.new
unique(diabetic$Diabetes.new)
diabetic$Diabetes.new = recode(diabetic$Diabetes.new, "
0 = 'No';
1 = 'Yes';
")
unique(diabetic$SmokingStatus_NISTCode)
diabetic$SmokingStatus_NISTCode = recode(diabetic$SmokingStatus_NISTCode, "
'FORMER' = 'FormerSmoker';
'TRUE' = 'Smoker';
'FALSE' = 'NonSmoker';
")
factor(diabetic$SmokingStatus_NISTCode, levels = c("NonSmoker", "FormerSmoker", "Smoker"))
diabetic$SmokingStatus_NISTCode = factor(diabetic$SmokingStatus_NISTCode, levels = c("NonSmoker", "FormerSmoker", "Smoker"))
diabetic = read.csv("diabetic.csv")
diabetic$TotalRiskFactors = recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
diabetic$TotalRiskFactors = factor(diabetic$TotalRiskFactors, levels = c("None", "One", "2 or More"))
diabetic$TotalRiskFactors
diabetic$Diabetes.new = recode(diabetic$Diabetes.new, "
0 = 'No';
1 = 'Yes';
")
diabetic$Diabetes.new = as.factor(diabetic$Diabetes.new)
diabetic$SmokingStatus_NISTCode = recode(diabetic$SmokingStatus_NISTCode, "
'FORMER' = 'FormerSmoker';
'TRUE' = 'Smoker';
'FALSE' = 'NonSmoker';
")
diabetic$SmokingStatus_NISTCode = factor(diabetic$SmokingStatus_NISTCode, levels = c("NonSmoker", "FormerSmoker", "Smoker"))
diabetic$age.new
unique(diabetic$age.new)
diabetic$age.new = factor(diabetic$age.new, levels = c("low", "medium", "high"))
diabetic$age.new
is.na(diabetic$age.new)
diabetic[, c("age.new", "TotalRiskFactors", "Diabetes.new", "HypertensionDX", "SmokingStatus_NISTCode")]
diabetic = diabetic[, c("age.new", "TotalRiskFactors", "Diabetes.new", "HypertensionDX", "SmokingStatus_NISTCode")]
na.omit(diabetic)
diabetic = na.omit(diabetic)
dim(diabetic)
sum(is.na(diabetic))
is.numeric(diabetic$HypertensionDX)
diabetic$HypertensionDX
# make hypertensionDX factor
diabetic$HypertensionDX = as.factor(diabetic$HypertensionDX)
diabetic$HypertensionDX
# create contingency table of each variable
table(diabetic$age.new)
# create contingency table of TotalRiskFactors variable
table(diabetic$TotalRiskFactors)
# create contingency table of Diabetes.new variable
table(diabetic$Diabetes.new)
# create contingency table of HypertensionDX variable
table(diabetic$HypertensionDX)
# create contingency table of SmokingStatus_NISTCode variable
table(diabetic$SmokingStatus_NISTCode)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
# read in libraries
library(ggplot2)
library(sjPlot)
library(caret)
library(effects)
library(car)
# read in data and make every variable we work with the correct data type
liver = read.csv("liver23.csv")
liver$tx_fail = ifelse(liver$tx_fail == 0, "Success", "Failure")
liver$tx_fail = factor(liver$tx_fail, levels = c("Success", "Failure"))
liver$hgt_cm_don_calc.x = as.numeric(liver$hgt_cm_don_calc.x)
liver$bmi_don_calc.x = as.numeric(liver$bmi_don_calc.x)
liver$coronary_angio_don.x = as.factor(liver$coronary_angio_don.x)
liver$hist_hypertens_don.x = as.factor(liver$hist_hypertens_don.x)
liver$ethnicity_don = as.factor(liver$ethnicity_don)
# create table of binary variable
table(liver$tx_fail)
# show proportion as well
prop.table(table(liver$tx_fail))
# create table of values for categorical variables
table(liver$coronary_angio_don.x)
# show proportion as well
prop.table(table(liver$coronary_angio_don.x))
# create table of values for categorical variables
table(liver$hist_hypertens_don.x)
# show proportion as well
prop.table(table(liver$hist_hypertens_don.x))
# create histogram of height values
hist(liver$hgt_cm_don_calc.x, xlab = "Height of Donor", main = "Distribution of Donor Height", freq = FALSE)
lines(density(liver$hgt_cm_don_calc.x), lwd = 2)
# create histogram of BMI values
hist(liver$bmi_don_calc.x, xlab = "BMI of Donor", main = "Distribution of Donor BMI", freq = FALSE, ylim = c(0, 0.10))
lines(density(liver$bmi_don_calc.x), lwd = 2)
liver_glm = glm(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x, data = liver, family = "binomial")
summary(liver_glm)
cbind(Estimate = exp(coef(liver_glm)))
suppressWarnings(exp(confint(liver_glm))) # had to run suppress warning because there were too many numbers close to 0, which gave the warning
plot_model(liver_glm, p.val = "wald")
# calculate pseudo r-squared by following the formula: 1-(residual deviance/null deviance)
1-(liver_glm$deviance/liver_glm$null.deviance)
predictions = ifelse(predict(liver_glm) > 0.5, "Failure", "Success")
predictions = factor(predictions, levels = c("Success", "Failure"))
confusionMatrix(liver$tx_fail, predictions)
set.seed(213)
train_control = trainControl(method = "cv", number = 5, classProbs = TRUE)
liver_cvglm = train(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x,
data = liver,
method = "glm",
family = binomial,
trControl = train_control)
liver_cvglm$results
confusionMatrix(predict(liver_cvglm), liver$tx_fail)
m1 = glm(tx_fail ~ hgt_cm_don_calc.x*ethnicity_don, data = liver, family="binomial")
plot(allEffects(m1))
liver_glm2 = glm(tx_fail ~ coronary_angio_don.x + hist_hypertens_don.x + hgt_cm_don_calc.x + bmi_don_calc.x + hgt_cm_don_calc.x*ethnicity_don,
data = liver,
family = "binomial")
summary(liver_glm2)
anova(liver_glm, liver_glm2, test = "Chisq")
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=TRUE, col="blue")
abline(0, 1)
diabetic = read.csv("diabetic.csv")
diabetic$TotalRiskFactors = recode(diabetic$TotalRiskFactors, "
0 = 'None';
1 = 'One';
2 = '2 or More';
3 = '2 or More';
4 = '2 or More';
5 = '2 or More';
6 = '2 or More';
7 = '2 or More';
8 = '2 or More';
")
diabetic$TotalRiskFactors = factor(diabetic$TotalRiskFactors, levels = c("None", "One", "2 or More"))
diabetic$Diabetes.new = recode(diabetic$Diabetes.new, "
0 = 'No';
1 = 'Yes';
")
diabetic$Diabetes.new = as.factor(diabetic$Diabetes.new)
diabetic$SmokingStatus_NISTCode = recode(diabetic$SmokingStatus_NISTCode, "
'FORMER' = 'FormerSmoker';
'TRUE' = 'Smoker';
'FALSE' = 'NonSmoker';
")
diabetic$SmokingStatus_NISTCode = factor(diabetic$SmokingStatus_NISTCode, levels = c("NonSmoker", "FormerSmoker", "Smoker"))
diabetic$age.new = factor(diabetic$age.new, levels = c("low", "medium", "high"))
# clean diabetic data set from NAs
diabetic = diabetic[, c("age.new", "TotalRiskFactors", "Diabetes.new", "HypertensionDX", "SmokingStatus_NISTCode")]
diabetic = na.omit(diabetic)
# make hypertensionDX factor
diabetic$HypertensionDX = as.factor(diabetic$HypertensionDX)
# create contingency table of age.new variable
table(diabetic$age.new)
# create contingency table of TotalRiskFactors variable
table(diabetic$TotalRiskFactors)
# create contingency table of Diabetes.new variable
table(diabetic$Diabetes.new)
# create contingency table of HypertensionDX variable
table(diabetic$HypertensionDX)
# create contingency table of SmokingStatus_NISTCode variable
table(diabetic$SmokingStatus_NISTCode)
diabetic$age.new
diabetic_multi = multinom(age.new ~ TotalRiskFactors + Diabetes.new + HypertensionDX + SmokingStatus_NISTCode, data = diabetic)
library(nnet)
diabetic_multi = multinom(age.new ~ TotalRiskFactors + Diabetes.new + HypertensionDX + SmokingStatus_NISTCode, data = diabetic)
coef(diabetic_multi)
exp(confint(diabetic_multi)))
exp(confint(diabetic_multi))
exp(coef(diabetic_multi))
transpose(exp(coef(diabetic_multi)))
t(exp(coef(diabetic_multi))
)
exp(confint(diabetic_multi)
exp(confint(diabetic_multi))
exp(confint(diabetic_multi))
t(exp(coef(diabetic_multi)))
exp(confint(diabetic_multi))
exp(confint(diabetic_multi))
t(exp(coef(diabetic_multi)))
exp(confint(diabetic_multi))
cbind(t(exp(coef(diabetic_multi))),
exp(confint(diabetic_multi)))
exp(confint(diabetic_multi))[1]
exp(confint(diabetic_multi))
exp(confint(diabetic_multi))[[1]]
exp(confint(diabetic_multi))
exp(confint(diabetic_multi))["medium"]
exp(confint(diabetic_multi))
class(exp(confint(diabetic_multi)))
exp(confint(diabetic_multi))
exp(confint(diabetic_multi))[, 1]
exp(confint(diabetic_multi))
exp(confint(diabetic_multi))[, , 1]
exp(confint(diabetic_multi))[, , "medium"]
cbind(t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"],)
cbind(t(exp(coef(diabetic_multi))), exp(confint(diabetic_multi))[, , "medium"], exp(confint(diabetic_multi))[, , "high"],)
cbind(t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"])
exp(confint(diabetic_multi))[, , "medium"]
cbind(t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"])
cbind(t(exp(coef(diabetic_multi))), exp(confint(diabetic_multi))[, , "medium"], exp(confint(diabetic_multi))[, , "high"])
cbind(t(exp(coef(diabetic_multi))), exp(confint(diabetic_multi))[, , "medium"], exp(confint(diabetic_multi))[, , "high"])
cbind(t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"])
cbind(Coefficiens = t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"])
cbind("Coefficiens" = t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"])
cbind(Coefficiens = t(exp(coef(diabetic_multi))), Medium = exp(confint(diabetic_multi))[, , "medium"], High = exp(confint(diabetic_multi))[, , "high"])
cbind(Coefficiens = t(exp(coef(diabetic_multi))), exp(confint(diabetic_multi))[, , "medium"], exp(confint(diabetic_multi))[, , "high"])
cbind(t(exp(coef(diabetic_multi))), exp(confint(diabetic_multi))[, , "medium"], exp(confint(diabetic_multi))[, , "high"])
t(exp(coef(diabetic_multi))
)
exp(confint(diabetic_multi))
t(exp(coef(diabetic_multi)))
exp(confint(diabetic_multi))[, , "medium"]
exp(confint(diabetic_multi))[, , "high"]
t(coef(diabetic_multi))
confint(diabetic_multi)[, , "high"]
t(coef(diabetic_multi))
confint(diabetic_multi)[, , "medium"]
summary(diabetic_multi)
summary(diabetic_multi)
summary(diabetic_multi)
diabetic_multi
summary(diabetic_multi)
diabetic_multi$value
coef(diabetic_multi)
summary(diabetic_multi)$coefficients
stderr(diabetic_multi)
summary(diabetic_multi)$standard.errors
z_scores = summary(diabetic_multi)$coefficients/summary(diabetic_multi)$standard.errors
p_values = 2 * (1 - pnorm(abs(z_scores)))
p_values
t(p_values)
0.05<0.09
0.05>0.09
diabetic$age.new
plot_model(diabetic_multi)
plot_model(diabetic_multi)
plot_model(diabetic_multi)
predict(diabetic_multi, diabetic)
predictions = predict(diabetic_multi, diabetic)
confusionMatrix(predictions, diabetic$age.new)
table(diabetic$age.new)
probpredictions
pred_liver_glm
library(ROCR)
probpredictions <- predict(liver_glm)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(probpredictions, "tpr","fpr")
library(ROCR)
pred_liver_glm <- prediction(probpredictions, liver$tx_fail)
roc_curve <- performance(pred_liver_glm, "tpr","fpr")
plot(roc_curve, colorize=TRUE, col="blue")
abline(0, 1)
